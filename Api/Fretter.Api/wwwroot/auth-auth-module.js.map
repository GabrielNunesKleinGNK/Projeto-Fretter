{"version":3,"sources":["webpack:///./src/app/content/pages/auth/auth-notice/auth-notice.component.html","webpack:///./src/app/content/pages/auth/auth-notice/auth-notice.component.scss","webpack:///./src/app/content/pages/auth/auth-notice/auth-notice.component.ts","webpack:///./src/app/content/pages/auth/auth.component.html","webpack:///./src/app/content/pages/auth/auth.component.scss","webpack:///./src/app/content/pages/auth/auth.component.ts","webpack:///./src/app/content/pages/auth/auth.module.ts","webpack:///./src/app/content/pages/auth/forgot-password/forgot-password.component.html","webpack:///./src/app/content/pages/auth/forgot-password/forgot-password.component.scss","webpack:///./src/app/content/pages/auth/forgot-password/forgot-password.component.ts","webpack:///./src/app/content/pages/auth/login/login.component.html","webpack:///./src/app/content/pages/auth/login/login.component.scss","webpack:///./src/app/content/pages/auth/login/login.component.ts","webpack:///./src/app/content/pages/auth/register/register.component.html","webpack:///./src/app/content/pages/auth/register/register.component.scss","webpack:///./src/app/content/pages/auth/register/register.component.ts","webpack:///./src/app/core/auth/auth-notice.service.ts"],"names":[],"mappings":"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","file":"auth-auth-module.js","sourcesContent":["module.exports = \"<div [hidden]=\\\"!message\\\" [ngClass]=\\\"{show: message, 'alert-danger': type === 'error', 'alert-success': type === 'success', 'alert-info': type === 'info'}\\\" class=\\\"m-alert m-alert--outline m-alert--outline-2x alert fade\\\" role=\\\"alert\\\" #alertNotice>\\r\\n\\t<span [innerHTML]=\\\"message\\\"></span>\\r\\n</div>\\r\\n\"","module.exports = \"\"","import { Component, OnInit, Output } from '@angular/core';\r\nimport { AuthNoticeService } from '../../../../core/auth/auth-notice.service';\r\nimport { AuthNotice } from '../../../../core/auth/auth-notice.interface';\r\n\r\n@Component({\r\n\tselector: 'm-auth-notice',\r\n\ttemplateUrl: './auth-notice.component.html',\r\n\tstyleUrls: ['./auth-notice.component.scss']\r\n})\r\nexport class AuthNoticeComponent implements OnInit {\r\n\t@Output() type: any;\r\n\t@Output() message: any = '';\r\n\r\n\tconstructor(public authNoticeService: AuthNoticeService) {}\r\n\r\n\tngOnInit() {\r\n\t\tthis.authNoticeService.onNoticeChanged$.subscribe(\r\n\t\t\t(notice: AuthNotice) => {\r\n\t\t\t\tthis.message = notice.message;\r\n\t\t\t\tthis.type = notice.type;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n}\r\n","module.exports = \"<div class=\\\"m-grid__item m-grid__item--fluid m-grid m-grid--desktop m-grid--ver-desktop m-grid--hor-tablet-and-mobile m-login m-login--6\\\" id=\\\"m_login\\\">\\r\\n\\t<div class=\\\"m-grid__item m-grid__item--fluid  m-grid__item--order-tablet-and-mobile-1 m-login__wrapper\\\">\\r\\n\\t\\t<!--begin::Head-->\\r\\n\\t\\t<div class=\\\"m-login__head\\\">\\r\\n\\t\\t\\t<!-- <span translate=\\\"AUTH.GENERAL.NO_ACCOUNT\\\">Don't have an account?</span>\\r\\n\\t\\t\\t<a href=\\\"javascript:;\\\" (click)=\\\"register()\\\" class=\\\"m-link m--font-danger\\\" translate=\\\"AUTH.GENERAL.SIGNUP_BUTTON\\\">Sign Up</a> -->\\r\\n\\t\\t</div>\\r\\n\\t\\t<!--end::Head-->\\r\\n\\r\\n\\t\\t<!--begin::Body-->\\r\\n\\t\\t<div class=\\\"m-login__body\\\">\\r\\n\\t\\t\\t<m-login *ngIf=\\\"action === 'login'\\\" [(action)]=\\\"action\\\"></m-login>\\r\\n\\r\\n\\t\\t\\t<m-register *ngIf=\\\"action === 'register'\\\" [(action)]=\\\"action\\\"></m-register>\\r\\n\\r\\n\\t\\t\\t<m-forgot-password *ngIf=\\\"action === 'forgot-password'\\\" [(action)]=\\\"action\\\"></m-forgot-password>\\r\\n\\t\\t</div>\\r\\n\\t\\t<!--end::Body-->\\r\\n\\t</div>\\r\\n</div>\\r\\n\"","module.exports = \"\"","import {\r\n\tComponent,\r\n\tOnInit,\r\n\tInput,\r\n\tHostBinding,\r\n\tOnDestroy,\r\n\tOutput\r\n} from '@angular/core';\r\nimport { LayoutConfigService } from '../../../core/services/layout-config.service';\r\nimport { Router, NavigationStart, NavigationEnd } from '@angular/router';\r\nimport { LayoutConfig } from '../../../config/layout';\r\nimport { Subject } from 'rxjs';\r\nimport { AuthNoticeService } from '../../../core/auth/auth-notice.service';\r\nimport { TranslationService } from '../../../core/services/translation.service';\r\n\r\n@Component({\r\n\tselector: 'm-auth',\r\n\ttemplateUrl: './auth.component.html',\r\n\tstyleUrls: ['./auth.component.scss']\r\n})\r\nexport class AuthComponent implements OnInit, OnDestroy {\r\n\t@HostBinding('id') id = 'm_login';\r\n\t@HostBinding('class')\r\n\t// tslint:disable-next-line:max-line-length\r\n\tclassses: any = 'm-grid m-grid--hor m-grid--root m-page';\r\n\r\n\t@Input() action = 'login';\r\n\ttoday: number = Date.now();\r\n\r\n\tconstructor(\r\n\t\tprivate layoutConfigService: LayoutConfigService,\r\n\t\tpublic authNoticeService: AuthNoticeService,\r\n\t\tprivate translationService: TranslationService,\r\n\t) {}\r\n\r\n\tngOnInit(): void {\r\n\t\t// set login layout to blank\r\n\t\tthis.layoutConfigService.setModel(new LayoutConfig({ content: { skin: '' } }), true);\r\n\r\n\t\tthis.translationService.getSelectedLanguage().subscribe(lang => {\r\n\t\t\tif (lang) {\r\n\t\t\t\tsetTimeout(() => this.translationService.setLanguage(lang));\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tngOnDestroy(): void {\r\n\t\t// reset back to fluid\r\n\t\tthis.layoutConfigService.reloadSavedConfig();\r\n\t}\r\n\r\n\tregister() {\r\n\t\tthis.action = 'register';\r\n\t}\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AuthComponent } from './auth.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { RouterModule } from '@angular/router';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\r\nimport {\r\n\tMatButtonModule,\r\n\tMatFormFieldModule,\r\n\tMatInputModule,\r\n\tMatCheckboxModule\r\n} from '@angular/material';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { SpinnerButtonModule } from '../../partials/content/general/spinner-button/spinner-button.module';\r\nimport { AuthNoticeComponent } from './auth-notice/auth-notice.component';\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tCommonModule,\r\n\t\tFormsModule,\r\n\t\tMatButtonModule,\r\n\t\tMatInputModule,\r\n\t\tMatFormFieldModule,\r\n\t\tMatCheckboxModule,\r\n\t\tTranslateModule.forChild(),\r\n\t\tSpinnerButtonModule,\r\n\t\tRouterModule.forChild([\r\n\t\t\t{\r\n\t\t\t\tpath: '',\r\n\t\t\t\tcomponent: AuthComponent\r\n\t\t\t}\r\n\t\t])\r\n\t],\r\n\tproviders: [],\r\n\tdeclarations: [\r\n\t\tAuthComponent,\r\n\t\tLoginComponent,\r\n\t\tRegisterComponent,\r\n\t\tForgotPasswordComponent,\r\n\t\tAuthNoticeComponent\r\n\t]\r\n})\r\nexport class AuthModule {}\r\n","module.exports = \"<!--begin::Signin-->\\r\\n<div class=\\\"m-login__signin\\\">\\r\\n\\t<div class=\\\"m-login__title\\\">\\r\\n\\t\\t<h3 class=\\\"m-login__title\\\">Forgotten Password ?</h3>\\r\\n\\t\\t<div class=\\\"m-login__desc\\\">Enter your email to reset your password:</div>\\r\\n\\t</div>\\r\\n\\r\\n\\t<m-auth-notice></m-auth-notice>\\r\\n\\r\\n\\t<!--begin::Form-->\\r\\n\\t<form class=\\\"m-login__form m-form\\\" name=\\\"form\\\" (ngSubmit)=\\\"f.form.valid && submit()\\\" #f=\\\"ngForm\\\" novalidate>\\r\\n\\t\\t<div class=\\\"form-group\\\">\\r\\n\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t<mat-label>Email</mat-label>\\r\\n\\t\\t\\t\\t<input matInput type=\\\"email\\\" name=\\\"email\\\" placeholder=\\\"Email address\\\" autocomplete=\\\"off\\\" [(ngModel)]=\\\"model.email\\\" #email=\\\"ngModel\\\" email=\\\"true\\\" required>\\r\\n\\t\\t\\t</mat-form-field>\\r\\n\\t\\t</div>\\r\\n\\t</form>\\r\\n\\t<!--end::Form-->\\r\\n\\r\\n\\t<!--begin::Action-->\\r\\n\\t<div class=\\\"m-login__action m-login__action--fit\\\">\\r\\n\\t\\t<button mat-button (click)=\\\"loginPage($event)\\\" [disabled]=\\\"loading\\\" translate=\\\"AUTH.GENERAL.BACK_BUTTON\\\">Back</button>\\r\\n\\t\\t<m-spinner-button [options]=\\\"spinner\\\" (click)=\\\"submit()\\\">{{'AUTH.GENERAL.SUBMIT_BUTTON' | translate}}</m-spinner-button>\\r\\n\\t</div>\\r\\n\\t<!--end::Action-->\\r\\n</div>\\r\\n<!--end::Signin-->\\r\\n\"","module.exports = \":host .mat-form-field {\\n  width: 100%; }\\n\"","import {\r\n\tComponent,\r\n\tOnInit,\r\n\tInput,\r\n\tOutput,\r\n\tViewChild,\r\n\tElementRef\r\n} from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { AuthenticationService } from '../../../../core/auth/authentication.service';\r\nimport { NgForm } from '@angular/forms';\r\nimport * as objectPath from 'object-path';\r\nimport { AuthNoticeService } from '../../../../core/auth/auth-notice.service';\r\nimport { SpinnerButtonOptions } from '../../../partials/content/general/spinner-button/button-options.interface';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\n@Component({\r\n\tselector: 'm-forgot-password',\r\n\ttemplateUrl: './forgot-password.component.html',\r\n\tstyleUrls: ['./forgot-password.component.scss']\r\n})\r\nexport class ForgotPasswordComponent implements OnInit {\r\n\tpublic model: any = { email: '' };\r\n\t@Input() action: string;\r\n\t@Output() actionChange = new Subject<string>();\r\n\tpublic loading = false;\r\n\r\n\t@ViewChild('f') f: NgForm;\r\n\terrors: any = [];\r\n\r\n\tspinner: SpinnerButtonOptions = {\r\n\t\tactive: false,\r\n\t\tspinnerSize: 18,\r\n\t\traised: true,\r\n\t\tbuttonColor: 'primary',\r\n\t\tspinnerColor: 'accent',\r\n\t\tfullWidth: false\r\n\t};\r\n\r\n\tconstructor(\r\n\t\tprivate authService: AuthenticationService,\r\n\t\tpublic authNoticeService: AuthNoticeService,\r\n\t\tprivate translate: TranslateService\r\n\t) {}\r\n\r\n\tngOnInit() {}\r\n\r\n\tloginPage(event: Event) {\r\n\t\tevent.preventDefault();\r\n\t\tthis.action = 'login';\r\n\t\tthis.actionChange.next(this.action);\r\n\t}\r\n\r\n\tsubmit() {\r\n\t\tthis.spinner.active = true;\r\n\t\tif (this.validate(this.f)) {\r\n\t\t\tthis.authService.requestPassword(this.model).subscribe(response => {\r\n\t\t\t\tif (typeof response !== 'undefined') {\r\n\t\t\t\t\tthis.action = 'login';\r\n\t\t\t\t\tthis.actionChange.next(this.action);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// tslint:disable-next-line:max-line-length\r\n\t\t\t\t\tthis.authNoticeService.setNotice(this.translate.instant('AUTH.VALIDATION.NOT_FOUND', {name: this.translate.instant('AUTH.INPUT.EMAIL')}), 'error');\r\n\t\t\t\t}\r\n\t\t\t\tthis.spinner.active = false;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tvalidate(f: NgForm) {\r\n\t\tif (f.form.status === 'VALID') {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tthis.errors = [];\r\n\t\tif (objectPath.get(f, 'form.controls.email.errors.email')) {\r\n\t\t\tthis.errors.push(this.translate.instant('AUTH.VALIDATION.INVALID', {name: this.translate.instant('AUTH.INPUT.EMAIL')}));\r\n\t\t}\r\n\t\tif (objectPath.get(f, 'form.controls.email.errors.required')) {\r\n\t\t\tthis.errors.push(this.translate.instant('AUTH.VALIDATION.REQUIRED', {name: this.translate.instant('AUTH.INPUT.EMAIL')}));\r\n\t\t}\r\n\r\n\t\tif (this.errors.length > 0) {\r\n\t\t\tthis.authNoticeService.setNotice(this.errors.join('<br/>'), 'error');\r\n\t\t\tthis.spinner.active = false;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n}\r\n","module.exports = \"<div class=\\\"m-stack__item m-stack__item--middle m-brand__logo\\\">\\r\\n\\t<a routerLink=\\\"/\\\" class=\\\"m-brand__logo-wrapper\\\">\\r\\n\\t\\t<img alt=\\\"\\\" src=\\\"../../../../../assets/app/media/img/logos/logo_login.png\\\" style=\\\"width: 100%;object-fit: fill;margin:0px;\\\"/>\\r\\n\\t</a>\\r\\n</div>\\r\\n<div class=\\\"m-login__form-divider\\\">\\r\\n\\t<div class=\\\"m-divider\\\">\\r\\n\\t\\t<span></span>\\r\\n\\t\\t<span></span>\\r\\n\\t</div>\\r\\n</div>\\r\\n<form class=\\\"m-login__form m-form\\\" name=\\\"form\\\" (ngSubmit)=\\\"f.form.valid && submit()\\\" #f=\\\"ngForm\\\" novalidate>\\r\\n\\t<div class=\\\"form-group\\\">\\r\\n\\t\\t<mat-form-field>\\r\\n\\t\\t\\t<mat-label>Usuario</mat-label>\\r\\n\\t\\t\\t<input matInput type=\\\"text\\\" name=\\\"username\\\" placeholder=\\\"Usuario\\\"\\r\\n\\t\\t\\t\\t   [(ngModel)]=\\\"model.username\\\" #username=\\\"ngModel\\\" required>\\r\\n\\t\\t</mat-form-field>\\r\\n\\t\\t<mat-form-field>\\r\\n\\t\\t\\t<mat-label>Senha</mat-label>\\r\\n\\t\\t\\t<input matInput type=\\\"password\\\" name=\\\"password\\\" placeholder=\\\"Password\\\" autocomplete=\\\"off\\\"\\r\\n\\t\\t\\t\\t   [(ngModel)]=\\\"model.password\\\" #username=\\\"ngModel\\\" required>\\r\\n\\t\\t</mat-form-field>\\r\\n\\t</div>\\r\\n</form>\\r\\n<div class=\\\"m-login__action m-login__action--fit\\\">\\r\\n\\t<!-- <a href=\\\"javascript:;\\\" (click)=\\\"forgotPasswordPage($event)\\\" class=\\\"m-link\\\">\\r\\n\\t\\t<span translate=\\\"AUTH.GENERAL.FORGOT_BUTTON\\\">Esqueci minha senha</span>\\r\\n\\t</a> -->\\r\\n\\t<m-spinner-button [options]=\\\"spinner\\\" (click)=\\\"submit()\\\">{{'AUTH.LOGIN.BUTTON' | translate}}</m-spinner-button>\\r\\n</div>\\r\\n<m-auth-notice></m-auth-notice>\\r\\n\\r\\n\"","module.exports = \":host .mat-form-field {\\n  width: 100%; }\\n\"","import {\r\n\tComponent,\r\n\tOnInit,\r\n\tOutput,\r\n\tInput,\r\n\tViewChild,\r\n\tOnDestroy,\r\n\tChangeDetectionStrategy,\r\n\tChangeDetectorRef,\r\n\tHostBinding\r\n} from '@angular/core';\r\nimport { AuthenticationService } from '../../../../core/auth/authentication.service';\r\nimport { Router } from '@angular/router';\r\nimport { Subject } from 'rxjs';\r\nimport { AuthNoticeService } from '../../../../core/auth/auth-notice.service';\r\nimport { NgForm } from '@angular/forms';\r\nimport * as objectPath from 'object-path';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { SpinnerButtonOptions } from '../../../partials/content/general/spinner-button/button-options.interface';\r\n\r\n@Component({\r\n\tselector: 'm-login',\r\n\ttemplateUrl: './login.component.html',\r\n\tstyleUrls: ['./login.component.scss'],\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class LoginComponent implements OnInit, OnDestroy {\r\n\tpublic model: any = \r\n\t{\r\n\t\tusername:'',\r\n\t\tpassword:'',\r\n\t\temail:'',\r\n\t\tscope:'portal offline_access',\r\n\t\tclient_id:'FretterApi',\r\n\t\tclient_secret:'4531a3f2b670e434344345718aa8c14976',\r\n\t\tgrant_type:'password'\r\n \t};\r\n\t@HostBinding('class') classes: string = 'm-login__signin';\r\n\t@Output() actionChange = new Subject<string>();\r\n\tpublic loading = false;\r\n\r\n\t@Input() action: string;\r\n\r\n\t@ViewChild('f') f: NgForm;\r\n\terrors: any = [];\r\n\r\n\tspinner: SpinnerButtonOptions = {\r\n\t\tactive: false,\r\n\t\tspinnerSize: 18,\r\n\t\traised: true,\r\n\t\tbuttonColor: 'primary',\r\n\t\tspinnerColor: 'accent',\r\n\t\tfullWidth: false\r\n\t};\r\n\r\n\tconstructor(\r\n\t\tprivate authService: AuthenticationService,\r\n\t\tprivate router: Router,\r\n\t\tpublic authNoticeService: AuthNoticeService,\r\n\t\tprivate translate: TranslateService,\r\n\t\tprivate cdr: ChangeDetectorRef\r\n\t) {}\r\n\r\n\tsubmit() {\r\n\t\tthis.spinner.active = true;\r\n\t\tif (this.validate(this.f)) {\r\n\t\t\tthis.authService.login(this.model)\r\n\t\t\t.subscribe(\r\n\t\t\t\tresponse => {\r\n\t\t\t\t\tdebugger;\r\n\t\t\t\t\tif (typeof response !== 'undefined') {\r\n\t\t\t\t\t\tthis.router.navigate(['/']);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.authNoticeService.setNotice(this.translate.instant('AUTH.VALIDATION.INVALID_LOGIN'), 'error');\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.spinner.active = false;\r\n\t\t\t\t\tthis.cdr.detectChanges();\r\n\t\t\t\t},\r\n\t\t\t\terr => {\r\n\t\t\t\t\tthis.authNoticeService.setNotice(this.translate.instant('AUTH.VALIDATION.INVALID_LOGIN'), 'error');\r\n\t\t\t\t\tthis.spinner.active = false;\r\n\t\t\t\t\tthis.cdr.detectChanges();\r\n\t\t\t\t},\r\n\t\t\t\t() => {\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t\t// .subscribe(response => {\r\n\t\t\t// \tdebugger;\r\n\t\t\t// });\r\n\t\t}\r\n\t}\r\n\r\n\tngOnInit(): void {\r\n\t\t// demo message to show\r\n\t\tif (!this.authNoticeService.onNoticeChanged$.getValue()) {\r\n\t\t\tconst initialNotice = ``;\r\n\t\t\tthis.authNoticeService.setNotice(initialNotice, 'success');\r\n\t\t}\r\n\t}\r\n\r\n\tngOnDestroy(): void {\r\n\t\tthis.authNoticeService.setNotice(null);\r\n\t}\r\n\r\n\tvalidate(f: NgForm) {\r\n\t\tif (f.form.status === 'VALID') {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tthis.errors = [];\r\n\t\tif (objectPath.get(f, 'form.controls.email.errors.email')) {\r\n\t\t\tthis.errors.push(this.translate.instant('AUTH.VALIDATION.INVALID', {name: this.translate.instant('AUTH.INPUT.EMAIL')}));\r\n\t\t}\r\n\t\tif (objectPath.get(f, 'form.controls.email.errors.required')) {\r\n\t\t\tthis.errors.push(this.translate.instant('AUTH.VALIDATION.REQUIRED', {name: this.translate.instant('AUTH.INPUT.EMAIL')}));\r\n\t\t}\r\n\r\n\t\tif (objectPath.get(f, 'form.controls.password.errors.required')) {\r\n\t\t\tthis.errors.push(this.translate.instant('AUTH.VALIDATION.INVALID', {name: this.translate.instant('AUTH.INPUT.PASSWORD')}));\r\n\t\t}\r\n\t\tif (objectPath.get(f, 'form.controls.password.errors.minlength')) {\r\n\t\t\tthis.errors.push(this.translate.instant('AUTH.VALIDATION.MIN_LENGTH', {name: this.translate.instant('AUTH.INPUT.PASSWORD')}));\r\n\t\t}\r\n\r\n\t\tif (this.errors.length > 0) {\r\n\t\t\tthis.authNoticeService.setNotice(this.errors.join('<br/>'), 'error');\r\n\t\t\tthis.spinner.active = false;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\tforgotPasswordPage(event: Event) {\r\n\t\tthis.action = 'forgot-password';\r\n\t\tthis.actionChange.next(this.action);\r\n\t}\r\n\r\n\tregister(event: Event) {\r\n\t\tthis.action = 'register';\r\n\t\tthis.actionChange.next(this.action);\r\n\t}\r\n}\r\n","module.exports = \"<!--begin::Signin-->\\r\\n<div class=\\\"m-login__signin\\\">\\r\\n\\t<div class=\\\"m-login__title\\\">\\r\\n\\t\\t<h3 class=\\\"m-login__title\\\">Sign Up</h3>\\r\\n\\t\\t<div class=\\\"m-login__desc\\\">Enter your details to create your account:</div>\\r\\n\\t</div>\\r\\n\\r\\n\\t<m-auth-notice></m-auth-notice>\\r\\n\\r\\n\\t<!--begin::Form-->\\r\\n\\t<form class=\\\"m-login__form m-form\\\" name=\\\"form\\\" (ngSubmit)=\\\"f.form.valid && submit()\\\" #f=\\\"ngForm\\\" novalidate>\\r\\n\\t\\t<div class=\\\"form-group\\\">\\r\\n\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t<mat-label>Fullname</mat-label>\\r\\n\\t\\t\\t\\t<input matInput type=\\\"text\\\" name=\\\"fullname\\\" placeholder=\\\"Fullname\\\" autocomplete=\\\"off\\\" [(ngModel)]=\\\"model.fullname\\\" #fullname=\\\"ngModel\\\" required>\\r\\n\\t\\t\\t</mat-form-field>\\r\\n\\t\\t</div>\\r\\n\\t\\t<div class=\\\"form-group\\\">\\r\\n\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t<mat-label>Email</mat-label>\\r\\n\\t\\t\\t\\t<input matInput type=\\\"email\\\" name=\\\"email\\\" placeholder=\\\"Email address\\\" autocomplete=\\\"off\\\" [(ngModel)]=\\\"model.email\\\" #email=\\\"ngModel\\\" email=\\\"true\\\" required>\\r\\n\\t\\t\\t</mat-form-field>\\r\\n\\t\\t</div>\\r\\n\\t\\t<div class=\\\"form-group\\\">\\r\\n\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t<mat-label>Password</mat-label>\\r\\n\\t\\t\\t\\t<input matInput minlength=\\\"4\\\" type=\\\"password\\\" name=\\\"password\\\" placeholder=\\\"Password\\\" autocomplete=\\\"off\\\" [(ngModel)]=\\\"model.password\\\" #password=\\\"ngModel\\\" required>\\r\\n\\t\\t\\t</mat-form-field>\\r\\n\\t\\t</div>\\r\\n\\t\\t<div class=\\\"form-group\\\">\\r\\n\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t<mat-label>Confirm Password</mat-label>\\r\\n\\t\\t\\t\\t<input matInput minlength=\\\"4\\\" type=\\\"password\\\" name=\\\"rpassword\\\" placeholder=\\\"Confirm password\\\" autocomplete=\\\"off\\\" [(ngModel)]=\\\"model.rpassword\\\" #rpassword=\\\"ngModel\\\" required>\\r\\n\\t\\t\\t</mat-form-field>\\r\\n\\t\\t</div>\\r\\n\\t\\t<div class=\\\"form-group\\\">\\r\\n\\t\\t\\t<mat-checkbox name=\\\"agree\\\" required=\\\"true\\\" [(ngModel)]=\\\"model.agree\\\" #agree=\\\"ngModel\\\">I agree the\\r\\n\\t\\t\\t\\t<a href=\\\"javascript:;\\\">terms & conditions</a>\\r\\n\\t\\t\\t</mat-checkbox>\\r\\n\\t\\t</div>\\r\\n\\t</form>\\r\\n\\t<!--end::Form-->\\r\\n\\r\\n\\t<!--begin::Action-->\\r\\n\\t<div class=\\\"m-login__action m-login__action--fit\\\">\\r\\n\\t\\t<button mat-button (click)=\\\"loginPage($event)\\\" [disabled]=\\\"loading\\\" translate=\\\"AUTH.GENERAL.BACK_BUTTON\\\">Back</button>\\r\\n\\t\\t<m-spinner-button [options]=\\\"spinner\\\" (click)=\\\"submit()\\\">{{'AUTH.GENERAL.SIGNUP_BUTTON' | translate}}</m-spinner-button>\\r\\n\\t</div>\\r\\n\\t<!--end::Action-->\\r\\n</div>\\r\\n<!--end::Signin-->\\r\\n\"","module.exports = \":host .mat-form-field {\\n  width: 100%; }\\n\"","import {\r\n\tComponent,\r\n\tOnInit,\r\n\tInput,\r\n\tOutput,\r\n\tViewChild,\r\n\tElementRef\r\n} from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { AuthenticationService } from '../../../../core/auth/authentication.service';\r\nimport { NgForm } from '@angular/forms';\r\nimport * as objectPath from 'object-path';\r\nimport { AuthNoticeService } from '../../../../core/auth/auth-notice.service';\r\nimport { SpinnerButtonOptions } from '../../../partials/content/general/spinner-button/button-options.interface';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\n@Component({\r\n\tselector: 'm-register',\r\n\ttemplateUrl: './register.component.html',\r\n\tstyleUrls: ['./register.component.scss']\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n\tpublic model: any = { email: '' };\r\n\t@Input() action: string;\r\n\t@Output() actionChange = new Subject<string>();\r\n\tpublic loading = false;\r\n\r\n\t@ViewChild('f') f: NgForm;\r\n\terrors: any = [];\r\n\r\n\tspinner: SpinnerButtonOptions = {\r\n\t\tactive: false,\r\n\t\tspinnerSize: 18,\r\n\t\traised: true,\r\n\t\tbuttonColor: 'primary',\r\n\t\tspinnerColor: 'accent',\r\n\t\tfullWidth: false\r\n\t};\r\n\r\n\tconstructor(\r\n\t\tprivate authService: AuthenticationService,\r\n\t\tpublic authNoticeService: AuthNoticeService,\r\n\t\tprivate translate: TranslateService\r\n\t) {}\r\n\r\n\tngOnInit() {}\r\n\r\n\tloginPage(event: Event) {\r\n\t\tevent.preventDefault();\r\n\t\tthis.action = 'login';\r\n\t\tthis.actionChange.next(this.action);\r\n\t}\r\n\r\n\tsubmit() {\r\n\t\tthis.spinner.active = true;\r\n\t\tif (this.validate(this.f)) {\r\n\t\t\tthis.authService.register(this.model).subscribe(response => {\r\n\t\t\t\tthis.action = 'login';\r\n\t\t\t\tthis.actionChange.next(this.action);\r\n\t\t\t\tthis.spinner.active = false;\r\n\t\t\t\tthis.authNoticeService.setNotice(this.translate.instant('AUTH.REGISTER.SUCCESS'), 'success');\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tvalidate(f: NgForm) {\r\n\t\tif (f.form.status === 'VALID') {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tthis.errors = [];\r\n\t\tif (objectPath.get(f, 'form.controls.fullname.errors.required')) {\r\n\t\t\tthis.errors.push(this.translate.instant('AUTH.VALIDATION.REQUIRED', {name: this.translate.instant('AUTH.INPUT.FULLNAME')}));\r\n\t\t}\r\n\r\n\t\tif (objectPath.get(f, 'form.controls.email.errors.email')) {\r\n\t\t\tthis.errors.push(this.translate.instant('AUTH.VALIDATION.INVALID', {name: this.translate.instant('AUTH.INPUT.EMAIL')}));\r\n\t\t}\r\n\t\tif (objectPath.get(f, 'form.controls.email.errors.required')) {\r\n\t\t\tthis.errors.push(this.translate.instant('AUTH.VALIDATION.REQUIRED', {name: this.translate.instant('AUTH.INPUT.EMAIL')}));\r\n\t\t}\r\n\r\n\t\tif (objectPath.get(f, 'form.controls.password.errors.required')) {\r\n\t\t\tthis.errors.push(this.translate.instant('AUTH.VALIDATION.REQUIRED', {name: this.translate.instant('AUTH.INPUT.PASSWORD')}));\r\n\t\t}\r\n\t\tif (objectPath.get(f, 'form.controls.password.errors.minlength')) {\r\n\t\t\tthis.errors.push(this.translate.instant('AUTH.VALIDATION.MIN_LENGTH', {name: this.translate.instant('AUTH.INPUT.PASSWORD'), min: 4}));\r\n\t\t}\r\n\r\n\t\tif (objectPath.get(f, 'form.controls.rpassword.errors.required')) {\r\n\t\t\tthis.errors.push(this.translate.instant('AUTH.VALIDATION.REQUIRED', {name: this.translate.instant('AUTH.INPUT.CONFIRM_PASSWORD')}));\r\n\t\t}\r\n\r\n\t\tif (objectPath.get(f, 'form.controls.agree.errors.required')) {\r\n\t\t\tthis.errors.push(this.translate.instant('AUTH.VALIDATION.AGREEMENT_REQUIRED'));\r\n\t\t}\r\n\r\n\t\tif (this.errors.length > 0) {\r\n\t\t\tthis.authNoticeService.setNotice(this.errors.join('<br/>'), 'error');\r\n\t\t\tthis.spinner.active = false;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { AuthNotice } from './auth-notice.interface';\r\n\r\n@Injectable({\r\n\tprovidedIn: 'root'\r\n})\r\nexport class AuthNoticeService {\r\n\tonNoticeChanged$: BehaviorSubject<AuthNotice>;\r\n\r\n\tconstructor() {\r\n\t\tthis.onNoticeChanged$ = new BehaviorSubject(null);\r\n\t}\r\n\r\n\tsetNotice(message: string, type?: string) {\r\n\t\tconst notice: AuthNotice = {\r\n\t\t\tmessage: message,\r\n\t\t\ttype: type\r\n\t\t};\r\n\t\tthis.onNoticeChanged$.next(notice);\r\n\t}\r\n}\r\n"],"sourceRoot":""}